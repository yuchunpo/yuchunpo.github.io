<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-20T03:00:26.978Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Ycp</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/05/20/python%E4%B8%AD%E7%9A%84%E7%B1%BB/"/>
    <id>http://example.com/2023/05/20/python%E4%B8%AD%E7%9A%84%E7%B1%BB/</id>
    <published>2023-05-20T02:52:25.187Z</published>
    <updated>2023-05-20T03:00:26.978Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">honk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Beep beep!&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_car = Car(<span class="string">&quot;Honda&quot;</span>, <span class="string">&quot;Civic&quot;</span>, <span class="number">2022</span>)</span><br><span class="line">my_car.honk()</span><br></pre></td></tr></table></figure><p><code>__init__</code>是一个特殊的方法，它在类被实例化时自动调用。它通常用于初始化类实例的属性。</p><p>例如，在上面的<code>Car</code>类中，我们定义了一个<code>__init__</code>方法，它接受三个参数：<code>make</code>、<code>model</code>和<code>year</code>。当我们创建一个新的<code>Car</code>实例时，我们可以传递这些参数来初始化实例的属性。</p><p><code>self</code>是一个指向类实例本身的引用。它用于访问属于类的变量。它不一定要命名为<code>self</code>，你可以将其命名为任何你喜欢的名称，但它必须是类中任何函数的第一个参数。</p><p>例如，在上面的<code>Car</code>类中，<code>self.make</code>、<code>self.model</code>和<code>self.year</code>分别表示类实例的<code>make</code>、<code>model</code>和<code>year</code>属性。当我们创建一个新的<code>Car</code>实例时，我们可以使用这些属性来访问和修改实例的状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Woof woof!&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name,self.age)</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">&quot;Buddy&quot;</span>, <span class="number">3</span>)</span><br><span class="line">my_dog.bark()</span><br><span class="line">my_dog.hello()</span><br></pre></td></tr></table></figure><p>Woof woof!<br>Buddy 3</p><p>输出以上内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/05/19/python%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/"/>
    <id>http://example.com/2023/05/19/python%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</id>
    <published>2023-05-19T10:05:54.382Z</published>
    <updated>2023-05-19T10:06:37.060Z</updated>
    
    <content type="html"><![CDATA[<p><strong>位置参数</strong></p><p>位置参数传递是最为简单的传递方式，按照函数参数的位置顺序逐个匹配传入，传入参数的个数必须与函数参数个数一致。</p><p>见示例1，根据位置顺序进行匹配，a，b，c分别赋值为2,3,4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#示例1</span><br><span class="line">def func(a,b,c):</span><br><span class="line">    print(&quot;args:&quot;,a,b,c)</span><br><span class="line">    </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    func(2,3,4) #输出结果 args: 2 3 4</span><br></pre></td></tr></table></figure><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>通过关键字对变量进行赋值，可以对全部关键字进行赋值，这时候位置可以随意改变。见示例2，输出结果与示例1一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#示例2</span><br><span class="line">def func(a,b,c):</span><br><span class="line">    print(&quot;args:&quot;,a,b,c)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    func(c=4,a=2,b=3) #输出结果 args: 2 3 4</span><br></pre></td></tr></table></figure><p>也可以对部分关键字进行赋值，这属于位置参数和关键字参数的混用，有关键字的部分必须放在后面，见示例3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args:&quot;</span>,a,b,c)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    func(<span class="number">2</span>,c=<span class="number">4</span>,b=<span class="number">3</span>) <span class="comment">#输出结果 args: 2 3 4</span></span><br></pre></td></tr></table></figure><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>有些函数参数提供了默认值，如果要使用，可不传入，如示例4</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#示例4</span><br><span class="line">def func(a,b,c=4):</span><br><span class="line">    print(&quot;args:&quot;,a,b,c)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    func(2,3) #输出结果 args: 2 3 4</span><br></pre></td></tr></table></figure><p>如果不使用其定义的默认值，可自行传入，对其修改，如示例5</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#示例5</span><br><span class="line">def func(a,b,c=4):</span><br><span class="line">    print(&quot;args:&quot;,a,b,c)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    func(2,3,5) #输出结果 args: 2 3 5</span><br></pre></td></tr></table></figure><h2 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h2><p>与普通关键字参数不同，命名关键字参数必须用<em>进行区分，</em>后面的参数必须通过关键字传入，见示例6</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#示例6</span><br><span class="line">def func(a,b,*,c):</span><br><span class="line">    print(&quot;args:&quot;,a,b,c)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    func(2,3,c=4) #输出结果 args: 2 3 4</span><br></pre></td></tr></table></figure><p>如果不按照关键字传入，则报TypeError的错误，见示例7</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例7</span><br><span class="line">def func(a,b,*,c):</span><br><span class="line">    print(&quot;args:&quot;,a,b,c)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    func(2,3,4)  </span><br><span class="line">#TypeError: func() takes 2 positional arguments but 3 were given</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>如果定义的函数中带有*args或者**args都是属于可变参数方式进行参数传入</p><p>*args是以元组的方式收集不匹配的的位置参数，见示例8</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#示例8</span><br><span class="line">def func(a,b,*c):</span><br><span class="line">    print(&quot;args c:&quot;c)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    func(2,3,4,5,6) #输出结果 args c: (4, 5, 6)</span><br></pre></td></tr></table></figure><p>在示例8中，有a,b,c3个形式参数，但是按照位置参数的形式传入了5个参数，最后的3个参数都按照元组的形式(4,5,6)传给了c。</p><p>定义函数时候，*args必须放在位置参数后面，否则报TypeError的错误，见示例9。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#示例9</span><br><span class="line">def func(a,*c,d):</span><br><span class="line">    print(&quot;args c:&quot;,c,d)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    func(2,3,4,5,6)</span><br><span class="line">#TypeError: func() missing 1 required keyword-only argument: &#x27;d&#x27;</span><br></pre></td></tr></table></figure><p>**args是以字典的形式收集不匹配的位置参数，仅对关键字参数传入有效，见示例10</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例10</span><br><span class="line">def func(a,b,**c):</span><br><span class="line">    print(&quot;args c:&quot;,c)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    func(2,3,c=4,d=5,e=6)#输出结果 args c: &#123;&#x27;c&#x27;: 4, &#x27;d&#x27;: 5, &#x27;e&#x27;: 6&#125;</span><br></pre></td></tr></table></figure><p>在示例10中，参数c收集了以字典的形式收集了后面的3个参数。跟*args一样，函数中的**args必须放在位置参数后面。</p><p>再看一个传参方式混合使用的的例子，见示例11。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#示例11</span><br><span class="line">def func(a,*b,c=None,**d):</span><br><span class="line">    print(&quot;a:&quot;,a)</span><br><span class="line">    print(&quot;b:&quot;,b)</span><br><span class="line">    print(&quot;c:&quot;,c)</span><br><span class="line">    print(&quot;d:&quot;,d)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    func(2,3,4,c=4,d=5,e=6）</span><br></pre></td></tr></table></figure><p>输出结果如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a: 2</span><br><span class="line">b: (3, 4)</span><br><span class="line">c: 4</span><br><span class="line">d: &#123;&#x27;d&#x27;: 5, &#x27;e&#x27;: 6&#125;    </span><br></pre></td></tr></table></figure><p>从示例11可见，2赋值给a,b以元组的形式收集了3,4，c&#x3D;4修改了默认参数的值，d以字典的形式收集了4,5,6</p><p>前面所说的<em>args或者**args是出现在函数定义中的，其实在参数传入时候也可以使用使用</em>和**，他们会数据进行解包。如示例12和示例13</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例12</span><br><span class="line">def func(a,b,c):</span><br><span class="line">   print(&quot;a:&quot;,a,&quot;,b:&quot;,b,&quot;,c:&quot;,c)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    a=(2,3,4)</span><br><span class="line">    func(*a)#输出结果 a: 2 ,b: 3 ,c: 4</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例13</span><br><span class="line">def func(a,b,c):</span><br><span class="line">   print(&quot;a:&quot;,a,&quot;,b:&quot;,b,&quot;,c:&quot;,c)</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    a=&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2,&#x27;c&#x27;:3&#125;</span><br><span class="line">    func(**a)#输出结果 a: 2 ,b: 3 ,c: 4</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;位置参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;位置参数传递是最为简单的传递方式，按照函数参数的位置顺序逐个匹配传入，传入参数的个数必须与函数参数个数一致。&lt;/p&gt;
&lt;p&gt;见示例1，根据位置顺序进行匹配，a，b，c分别赋值为2,3,4&lt;/p&gt;
&lt;figure cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/05/19/python%E4%B8%AD%E7%9A%84print/"/>
    <id>http://example.com/2023/05/19/python%E4%B8%AD%E7%9A%84print/</id>
    <published>2023-05-19T07:45:35.959Z</published>
    <updated>2023-05-20T01:53:58.645Z</updated>
    
    <content type="html"><![CDATA[<p>在 Python 中，<code>print()</code> 函数用于将指定的内容打印到标准输出（通常是控制台）。它是一个内置函数，用于快速和简单地输出文本或变量的值。下面是关于 <code>print()</code> 函数的一些详细说明：</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">luaCopy code</span><br><span class="line">print(value1, value2, ..., sep=&#x27; &#x27;, end=&#x27;\n&#x27;, file=sys.stdout, flush=False)</span><br></pre></td></tr></table></figure><ul><li><code>value1, value2, ...</code>：要打印的值，可以是一个或多个表达式、变量、字符串等。多个值之间用逗号分隔。</li><li><code>sep</code>（可选）：用于分隔打印值之间的字符，默认是空格。</li><li><code>end</code>（可选）：用于指定打印结束时的字符，默认是换行符 <code>\n</code>。</li><li><code>file</code>（可选）：用于指定输出的文件对象，默认是标准输出流 <code>sys.stdout</code>。</li><li><code>flush</code>（可选）：用于控制是否刷新输出，默认是 <code>False</code>，即不刷新。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>以下是一些使用 <code>print()</code> 函数的示例：</p><ol><li>打印字符串：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy code</span><br><span class="line">print(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><ol><li>打印变量值：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy code</span><br><span class="line">name = &quot;Alice&quot;</span><br><span class="line">age = 25</span><br><span class="line">print(&quot;Name:&quot;, name, &quot;Age:&quot;, age)</span><br></pre></td></tr></table></figure><ol><li>使用分隔符和结束字符：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy code</span><br><span class="line">print(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;, sep=&quot;, &quot;, end=&quot;!&quot;)</span><br></pre></td></tr></table></figure><p>输出：<code>Apple, Banana, Orange!</code></p><ol><li>将输出重定向到文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy code</span><br><span class="line">with open(&quot;output.txt&quot;, &quot;w&quot;) as f:</span><br><span class="line">    print(&quot;Hello, World!&quot;, file=f)</span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p><code>print()</code> 函数还支持使用格式化字符串进行更灵活的输出。可以使用占位符和格式化符号来指定输出的格式。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy code</span><br><span class="line">name = &quot;Alice&quot;</span><br><span class="line">age = 25</span><br><span class="line">print(&quot;Name: %s, Age: %d&quot; % (name, age))</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>%s</code> 和 <code>%d</code> 是格式化符号，分别用于输出字符串和整数值。<code>%</code> 运算符用于将占位符替换为实际的值。这样可以根据需要进行更精确的输出。</p><p>总而言之，<code>print()</code> 函数是一个常用的用于输出信息的函数，可用于打印字符串、变量值和其他数据。它提供了许多选项来控制输出的格式，使输出更具灵活性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Python 中，&lt;code&gt;print()&lt;/code&gt; 函数用于将指定的内容打印到标准输出（通常是控制台）。它是一个内置函数，用于快速和简单地输出文本或变量的值。下面是关于 &lt;code&gt;print()&lt;/code&gt; 函数的一些详细说明：&lt;/p&gt;
&lt;h3 id=&quot;语法</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>非对称加密</title>
    <link href="http://example.com/2023/05/07/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>http://example.com/2023/05/07/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</id>
    <published>2023-05-07T15:42:36.000Z</published>
    <updated>2023-05-07T15:48:37.985Z</updated>
    
    <content type="html"><![CDATA[<p>729tr89304.yicp.fun,51560<br>sa<br>@Yid548967</p><p><a href="https://sql.rth1.vip/">https://sql.rth1.vip/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;729tr89304.yicp.fun,51560&lt;br&gt;sa&lt;br&gt;@Yid548967&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sql.rth1.vip/&quot;&gt;https://sql.rth1.vip/&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/03/12/hello-world/"/>
    <id>http://example.com/2023/03/12/hello-world/</id>
    <published>2023-03-12T02:41:21.673Z</published>
    <updated>2023-03-12T02:41:21.673Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
